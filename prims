#include <iostream>
#include <vector>
#include <climits>

using namespace std;

int findMinimumKey(vector<int>& key, vector<bool>& mstSet, int V) {
    int minKey = INT_MAX;
    int minIndex;
    
    for (int v = 0; v < V; ++v) {
        if (!mstSet[v] && key[v] < minKey) {
            minKey = key[v];
            minIndex = v;
        }
    }
    
    return minIndex;
}

void printMST(vector<int>& parent, vector<vector<int>>& graph, int V) {
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; ++i) {
        cout << parent[i] << " - " << i << "\t" << graph[i][parent[i]] << "\n";
    }
}

void primMST(vector<vector<int>>& graph, int V) {
    vector<int> parent(V); // Array to store constructed MST
    vector<int> key(V, INT_MAX); // Key values used to pick minimum weight edge in cut
    vector<bool> mstSet(V, false); // To represent set of vertices not yet included in MST
    
    key[0] = 0; // First vertex is always picked first
    
    for (int count = 0; count < V - 1; ++count) {
        int u = findMinimumKey(key, mstSet, V); // Pick the minimum key vertex from the set of vertices not yet included in MST
        mstSet[u] = true; // Add the picked vertex to the MST set
        
        for (int v = 0; v < V; ++v) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
    
    printMST(parent, graph, V);
}

int main() {
    int V; // Number of vertices in graph
    cout << "Enter the number of vertices: ";
    cin >> V;
    
    vector<vector<int>> graph(V, vector<int>(V));
    
    cout << "Enter the adjacency matrix:\n";
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> graph[i][j];
        }
    }
    
    primMST(graph, V);
    
    return 0;
}
